/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var file = __webpack_require__(1);
	
	var dropFiles = __webpack_require__(4);
	
	var dragOver = __webpack_require__(5);
	
	// extend binders object in browser environment
	if (typeof Matreshka === 'function') {
	    var _Matreshka = Matreshka;
	    var binders = _Matreshka.binders;
	
	
	    binders.file = file;
	    binders.dropFiles = dropFiles;
	    binders.dragOver = dragOver;
	}
	
	// export these binders in CJS environment
	module.exports = {
	    file: file,
	    dropFiles: dropFiles,
	    dragOver: dragOver
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getFileReaderMethodName = __webpack_require__(2);
	
	var readFiles = __webpack_require__(3);
	
	function createFileChangeHandler(_ref) {
	    var callback = _ref.callback;
	    var methodName = _ref.methodName;
	
	    return function fileChangeHandler(event) {
	        var files = this.files;
	
	
	        if (files.length) {
	            readFiles(files, methodName, callback);
	        } else {
	            callback([]);
	        }
	    };
	}
	
	module.exports = fileBinder;
	function fileBinder(readAs) {
	    var methodName = readAs ? getFileReaderMethodName(readAs) : null;
	    var fileChangeHandler = void 0;
	
	    return {
	        on: function (callback) {
	            fileChangeHandler = createFileChangeHandler({
	                callback: callback,
	                methodName: methodName
	            });
	            this.addEventListener('change', fileChangeHandler);
	        },
	        destroy: function () {
	            this.removeEventListener('change', fileChangeHandler);
	        },
	        getValue: function (_ref2) {
	            var domEvent = _ref2.domEvent;
	
	            var files = domEvent || [];
	            return this.multiple ? files : files[0] || null;
	        },
	
	        setValue: null
	    };
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = getFileReaderMethodName;
	function getFileReaderMethodName(readAs) {
		/* istanbul ignore if  */
		if (typeof FileReader == 'undefined') {
			throw Error('FileReader is not supported by this browser');
		}
	
		var methodName = 'readAs' + readAs[0].toUpperCase() + readAs.slice(1);
	
		if (!FileReader.prototype[methodName]) {
			throw Error('Method ' + methodName + ' is not supported by FileReader');
		}
	
		return methodName;
	}

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = readFiles;
	function readFiles(files, fileReaderMethodName, callback) {
	    var length = files.length;
	
	    var arrayOfFiles = Array(length);
	
	    if (fileReaderMethodName) {
	        (function () {
	            var j = 0;
	
	            var _loop = function (i) {
	                var reader = new FileReader();
	                var file = files[i];
	
	                arrayOfFiles[i] = file;
	
	                reader.addEventListener('loadend', function (evt) {
	                    file.readerResult = reader.result;
	                    if (++j === length) {
	                        callback(arrayOfFiles);
	                    }
	                });
	
	                reader[fileReaderMethodName](file);
	            };
	
	            for (var i = 0; i < length; i++) {
	                _loop(i);
	            }
	        })();
	    } else {
	        for (var i = 0; i < length; i++) {
	            arrayOfFiles[i] = files[i];
	        }
	
	        callback(arrayOfFiles);
	    }
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getFileReaderMethodName = __webpack_require__(2);
	
	var readFiles = __webpack_require__(3);
	
	function createDropHandler(_ref) {
	    var callback = _ref.callback;
	    var methodName = _ref.methodName;
	
	    return function dropHandler(event) {
	        event.preventDefault();
	        var files = event.dataTransfer.files;
	
	        if (files.length) {
	            readFiles(files, methodName, callback);
	        } else {
	            callback([]);
	        }
	    };
	}
	
	function createDragoverHandler() {
	    return function dragoverHandler(event) {
	        event.preventDefault();
	        event.dataTransfer.dropEffect = 'copy';
	    };
	}
	
	module.exports = dropFilesBinder;
	function dropFilesBinder(readAs) {
	    var methodName = readAs ? getFileReaderMethodName(readAs) : null;
	    var dropHandler = void 0;
	    var dragoverHandler = void 0;
	
	    return {
	        on: function (callback) {
	            dropHandler = createDropHandler({
	                callback: callback,
	                methodName: methodName
	            });
	            dragoverHandler = createDragoverHandler();
	
	            this.addEventListener('drop', dropHandler);
	            this.addEventListener('dragover', dragoverHandler);
	        },
	        destroy: function () {
	            this.removeEventListener('drop', dropHandler);
	            this.removeEventListener('dragover', dragoverHandler);
	        },
	        getValue: function (_ref2) {
	            var domEvent = _ref2.domEvent;
	
	            return domEvent || [];
	        },
	
	        setValue: null
	    };
	}

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = dragOver;
	function dragOver() {
	    return {
	        on: 'dragover dragenter dragleave dragend drop',
	        getValue: function (_ref) {
	            var domEvent = _ref.domEvent;
	
	            var eventType = domEvent && domEvent.type;
	            return eventType == 'dragover' || eventType == 'dragenter';
	        },
	
	        setValue: null
	    };
	}

/***/ }
/******/ ]);
//# sourceMappingURL=matreshka-binders-file.min.js.map